// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// generator client {
//   provider = "prisma-client-js"
// }
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

model User {
  uuid         String       @id @default(uuid())
  username     String       @unique
  email        String       @unique @default("")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  posts        Post[]
  tags         Tag[]
  evaluations  Evaluation[]
  mediaActions Action[]
  favorites    Favorite[]
  comments     Comment[]
}

model Post {
  uuid      String   @id @default(uuid())
  userUuid  String
  title     String?
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  media     Media[]
  user      User     @relation(fields: [userUuid], references: [uuid])
}

model Media {
  uuid            String            @id @default(uuid())
  postUuid        String
  parentMediaUuid String?
  filename        String
  width           Int
  height          Int
  ratio           Float
  s3Key           String
  s3Bucket        String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  post            Post              @relation(fields: [postUuid], references: [uuid])
  parentMedia     Media?            @relation("ChildMedias", fields: [parentMediaUuid], references: [uuid])
  childMedias     Media[]           @relation("ChildMedias")
  evaluations     MediaEvaluation[]
  actions         MediaAction[]
  mediaTags       MediaTag[]
  favorites       Favorite[]
  comments        MediaComment[]
}

model Tag {
  uuid           String          @id @default(uuid())
  name           String
  userUuid       String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  mediaTags      MediaTag[]
  tagEvaluations TagEvaluation[]
  user           User            @relation(fields: [userUuid], references: [uuid])
}

model MediaTag {
  uuid           String          @id @default(uuid())
  mediaUuid      String
  tagUuid        String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  media          Media           @relation(fields: [mediaUuid], references: [uuid])
  tag            Tag             @relation(fields: [tagUuid], references: [uuid])
  tagEvaluations TagEvaluation[]
}

model Evaluation {
  uuid             String            @id @default(uuid())
  userUuid         String
  value            Float
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  mediaEvaluations MediaEvaluation[]
  tagEvaluations   TagEvaluation[]
  user             User              @relation(fields: [userUuid], references: [uuid])
}

model MediaEvaluation {
  uuid           String     @id @default(uuid())
  mediaUuid      String
  evaluationUuid String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  media          Media      @relation(fields: [mediaUuid], references: [uuid])
  evaluation     Evaluation @relation(fields: [evaluationUuid], references: [uuid])
}

model TagEvaluation {
  uuid           String     @id @default(uuid())
  tagUuid        String
  evaluationUuid String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  tag            Tag        @relation(fields: [tagUuid], references: [uuid])
  evaluation     Evaluation @relation(fields: [evaluationUuid], references: [uuid])
  mediaTag       MediaTag?  @relation(fields: [mediaTagUuid], references: [uuid])
  mediaTagUuid   String?
}

model CommentAction {
  uuid        String   @id @default(uuid())
  commentUuid String
  actionUuid  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  comment     Comment  @relation(fields: [commentUuid], references: [uuid])
  action      Action   @relation(fields: [actionUuid], references: [uuid])
}

model MediaAction {
  uuid       String   @id @default(uuid())
  mediaUuid  String
  actionUuid String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  media      Media    @relation(fields: [mediaUuid], references: [uuid])
  action     Action   @relation(fields: [actionUuid], references: [uuid])
}

model Action {
  uuid          String          @id @default(uuid())
  userUuid      String
  type          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  mediaActions  MediaAction[]
  commentAction CommentAction[]
  user          User            @relation(fields: [userUuid], references: [uuid])
}

model Favorite {
  uuid      String   @id @default(uuid())
  userUuid  String
  mediaUuid String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userUuid], references: [uuid])
  media     Media    @relation(fields: [mediaUuid], references: [uuid])
}

model MediaComment {
  uuid        String   @id @default(uuid())
  mediaUuid   String
  commentUuid String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  media       Media    @relation(fields: [mediaUuid], references: [uuid])
  comment     Comment  @relation(fields: [commentUuid], references: [uuid])
}

model Comment {
  uuid              String          @id @default(uuid())
  userUuid          String
  mediaUuid         String
  parentCommentUuid String?
  content           String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  user              User            @relation(fields: [userUuid], references: [uuid])
  commentActions    CommentAction[]
  mediaComments     MediaComment[]
}

# Code generated by graphql-codegen. DO NOT EDIT.
type Action {
  commentAction: [CommentAction!]!
  createdAt: DateTime!
  mediaActions: [MediaAction!]!
  type: String!
  updatedAt: DateTime!
  user: User!
  userUuid: String!
  uuid: String!
}

type AuthenticationResult {
  AccessToken: String
  ExpiresIn: Int
  IdToken: String
  NewDeviceMetadata: String
  RefreshToken: String
  TokenType: String
}

type Comment {
  commentActions: [CommentAction!]!
  content: String!
  createdAt: DateTime!
  mediaComments: [MediaComment!]!
  mediaUuid: String!
  updatedAt: DateTime!
  user: User!
  userUuid: String!
  uuid: String!
}

type CommentAction {
  action: Action!
  actionUuid: String!
  comment: Comment!
  commentUuid: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  uuid: String!
}

scalar DateTime

type Evaluation {
  createdAt: DateTime!
  mediaEvaluations: [MediaEvaluation!]!
  tagEvaluations: [TagEvaluation!]!
  updatedAt: DateTime!
  user: User!
  userUuid: String!
  uuid: String!
  value: Float!
}

type Favorite {
  createdAt: DateTime!
  media: Media!
  mediaUuid: String!
  updatedAt: DateTime!
  user: User!
  userUuid: String!
  uuid: String!
}

type Media {
  actions: [MediaAction!]!
  childMedias: [Media!]!
  comments: [MediaComment!]!
  createdAt: DateTime!
  evaluations: [MediaEvaluation!]!
  favorites: [Favorite!]!
  filename: String!
  height: Int!
  mediaTags: [MediaTag!]!
  parentMedia: Media
  parentMediaUuid: String
  post: Post!
  postUuid: String!
  ratio: Float!
  s3Bucket: String!
  s3Key: String!
  updatedAt: DateTime!
  uuid: String!
  width: Int!
}

type MediaAction {
  action: Action!
  actionUuid: String!
  createdAt: DateTime!
  media: Media!
  mediaUuid: String!
  updatedAt: DateTime!
  uuid: String!
}

type MediaComment {
  comment: Comment!
  commentUuid: String!
  createdAt: DateTime!
  media: Media!
  mediaUuid: String!
  updatedAt: DateTime!
  uuid: String!
}

type MediaEvaluation {
  createdAt: DateTime!
  evaluation: Evaluation!
  evaluationUuid: String!
  media: Media!
  mediaUuid: String!
  updatedAt: DateTime!
  uuid: String!
}

type MediaTag {
  createdAt: DateTime!
  media: Media!
  mediaUuid: String!
  tag: Tag!
  tagEvaluations: [TagEvaluation!]!
  tagUuid: String!
  updatedAt: DateTime!
  uuid: String!
}

type Mutation {
  """コメントに対してアクションを追加する"""
  addActionToComment(actionType: String!, commentUuid: String!, userUuid: String!): CommentAction

  """メディアに対してアクションを追加する"""
  addActionToMedia(actionType: String!, mediaUuid: String!, userUuid: String!): MediaAction

  """コメントのコメントを追加する"""
  addCommentToComment(commentUuid: String!, content: String!, userUuid: String!): Comment

  """メディアのコメントを追加する"""
  addCommentToMedia(content: String!, mediaUuid: String!, userUuid: String!): MediaComment

  """メディアの評価を追加する"""
  addEvaluationToMedia(evaluationUuid: String!, mediaUuid: String!, userUuid: String!): MediaEvaluation

  """タグの評価を追加する"""
  addEvaluationToTag(evaluationUuid: String!, tagUuid: String!, userUuid: String!): TagEvaluation

  """メディアをお気に入りに追加する"""
  addMediaToFavorites(mediaUuid: String!, userUuid: String!): Favorite

  """メディアにタグを追加する"""
  addTagToMedia(mediaUuid: String!, tagUuid: String!, userUuid: String!): MediaTag

  """新しいコメントを作成する"""
  createComment(content: String!, mediaUuid: String!, userUuid: String!): Comment

  """新しいメディアを作成する"""
  createMedia(contentType: String!, file: Upload!, filename: String!, height: Int!, ratio: Float!, userUuid: String!, width: Int!): Post

  """新しいポストを作成する"""
  createPost(content: String, title: String, userUuid: String!): Post

  """新しいタグを作成する"""
  createTag(name: String!, userUuid: String!): Tag

  """新しいユーザーを作成する"""
  createUser(username: String!): User

  """メディアからお気に入りを削除する"""
  removeMediaFromFavorites(favoriteUuid: String!): Favorite
  signin(email: String!, password: String!): AuthenticationResult
  signout(accessToken: String!): Boolean
  signup(email: String!, password: String!, phoneNumber: String!, username: String!): User
}

type Post {
  content: String
  createdAt: DateTime!
  media: [Media!]!
  title: String
  updatedAt: DateTime!
  user: User!
  userUuid: String!
  uuid: String!
}

type Query {
  """複数のコメントを取得する"""
  comments(mediaUuid: String!): [Comment!]!

  """特定のメディアを取得する"""
  media(uuid: String!): Media

  """ポストの一覧を取得する"""
  posts: [Post!]!

  """複数のタグを取得する"""
  tags(uuids: [String!]!): [Tag!]!

  """特定のユーザーを取得する"""
  user(uuid: String!): User
}

type ResMedia {
  createdAt: String!
  type: String!
  updatedAt: String!
  url: String!
  uuid: String!
}

type Tag {
  createdAt: DateTime!
  mediaTags: [MediaTag!]!
  name: String!
  tagEvaluations: [TagEvaluation!]!
  updatedAt: DateTime!
  user: User!
  userUuid: String!
  uuid: String!
}

type TagEvaluation {
  createdAt: DateTime!
  evaluation: Evaluation!
  evaluationUuid: String!
  mediaTag: MediaTag
  tag: Tag!
  tagUuid: String!
  updatedAt: DateTime!
  uuid: String!
}

scalar Upload

type User {
  comments: [Comment!]!
  createdAt: DateTime!
  evaluations: [Evaluation!]!
  favorites: [Favorite!]!
  mediaActions: [Action!]!
  posts: [Post!]!
  tags: [Tag!]!
  updatedAt: DateTime!
  username: String!
  uuid: String!
}